@page "/mensagem/edit"
@using Microsoft.EntityFrameworkCore
@using Cache.Web.Models
@inject Cache.Web.Database.Contexts.AppDbContext context
@inject NavigationManager _navigationManager
@rendermode InteractiveServer

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>
<h4>Mensagem</h4>
<hr />

@if (Model is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-8">
            <EditForm method="post" Model="Model" OnValidSubmit="HandleSubmit" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />

                <input type="hidden" name="Mensagem.Id" value="@Model.Id" />

               <!-- Campo IdMsgJdPi -->
                <div class="mb-3">
                    <label for="idmsgjdpi" class="form-label">IdMsgJdPi:</label>
                    <InputText id="idmsgjdpi" @bind-Value="@Model.IdMsgJdPi" class="form-control" />
                    <ValidationMessage For="() => Model.IdMsgJdPi" class="text-danger" />
                </div>

                <!-- Campo IdMsg -->
                <div class="mb-3">
                    <label for="idmsg" class="form-label">IdMsg:</label>
                    <InputText id="idmsg" @bind-Value="@Model.IdMsg" class="form-control" />
                    <ValidationMessage For="() => Model.IdMsg" class="text-danger" />
                </div>

                <!-- Campo TpMsg -->
                <div class="mb-3">
                    <label for="tpmsg" class="form-label">TpMsg:</label>
                    <InputText id="tpmsg" @bind-Value="@Model.TpMsg" class="form-control" />
                    <ValidationMessage For="() => Model.TpMsg" class="text-danger" />
                </div>

                <!-- Campo QueueMsg -->
                <div class="mb-3">
                    <label for="queuemsg" class="form-label">QueueMsg:</label>
                    <InputText id="queuemsg" @bind-Value="@Model.QueueMsg" class="form-control" />
                    <ValidationMessage For="() => Model.QueueMsg" class="text-danger" />
                </div>

                <!-- Campo XmlMsg -->
                <div class="">
                    <label for="xmlmsg" class="form-label">XmlMsg:</label>
                    <InputTextArea Rows="20" Cols="500" id="xmlmsg" @bind-Value="@Model.XmlMsg" class="form-control" />
                    <ValidationMessage For="() => Model.XmlMsg" class="text-danger" />
                </div>

                <br />
                <button type="submit" class="btn btn-primary">Save</button>
                <br />
                <br />
            </EditForm>
        </div>
    </div>
}

<div> <a href="/mensagem">Back to List</a> </div>

@code {
    [SupplyParameterFromQuery] public Guid Id { get; set; }
    [SupplyParameterFromForm] public MensagemModel? Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Model ??= await context.Mensagens.FirstOrDefaultAsync(m => m.Id == Id);
            if (Model is null)  _navigationManager.NavigateTo("Error");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erro: " + ex.Message);
            _navigationManager.NavigateTo("Error");
        }
    }

    public async Task HandleSubmit()
    {
        try
        {
            context.Attach(Model!).State = EntityState.Modified;

            await context.SaveChangesAsync();

            _navigationManager.NavigateTo("/mensagem");
        }
        catch (DbUpdateConcurrencyException)
        {
            if (context.Mensagens.Any(e => e.Id == Model!.Id)) throw;
            _navigationManager.NavigateTo("Error");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erro: " + ex.Message);
            _navigationManager.NavigateTo("Error");
        }
    }
}
@page "/mensagem"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using Cache.Web.Models
@using Cache.Web.Components.Shared.Mensagem
@inject Cache.Web.Database.Contexts.AppDbContext context
@attribute [StreamRendering]

<PageTitle>Mensagem</PageTitle>

<h1>Mensagem (@mensagens?.Count())</h1>
<p><a href="mensagem/create">Create New</a> - Última atualização: @LastUpdateTime</p>
<MensagemButton />

@if (mensagens == null)
{
    <p><em>Loading...</em></p>
}
else @if (mensagens.Count() == 0)
{
    <p>Sem dados...</p>
}
else
{
    <div class="grid" tabindex="-1" Virtualize="true">
        <QuickGrid Class="table" Items="@mensagens">
            <PropertyColumn Title="DtHr" Property="@(m => m.DtHrRegistro)" Sortable="true" Format="yyyy-MM-dd HH:mm:ss.fff" />
            <PropertyColumn Title="TpMsg" Property="@(m => m.TpMsg)" Sortable="true" />
            <PropertyColumn Title="IdMsgJdPi" Property="@(m => TruncateMiddle(m.IdMsgJdPi))" Sortable="true" />
            <PropertyColumn Title="IdMsg" Property="@(m => TruncateMiddle(m.IdMsg))" Sortable="true" />
            @* <PropertyColumn Title="Id" Property="@(m => m.Id)" Sortable="true" /> *@
            @* <PropertyColumn Title="QueueMsg" Property="@(m => m.QueueMsg)" Sortable="true" /> *@
            @* <PropertyColumn Title="XmlMsg" Property="@(m => TruncateMiddle(m.XmlMsg))" /> *@
            <TemplateColumn Context="mensagem">
                <a href="@($"mensagem/edit?id={mensagem.Id}")">Edit</a> |
                <a href="@($"mensagem/details?id={mensagem.Id}")">Details</a> |
                <a href="@($"mensagem/delete?id={mensagem.Id}")">Delete</a>
               @*  <button class="btn btn-danger" @onclick="async () => await DeleteCompany(item.Id)">Deletar</button> *@
            </TemplateColumn>
        </QuickGrid>
    </div>
    @* <h3>Total de produtos: @mensagens.Count()</h3> *@
}

@code {
    private IQueryable<MensagemModel>? mensagens = null;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 500 };
    private string LastUpdateTime = DateTime.Now.ToString("HH:mm:ss");

    protected override async Task OnInitializedAsync()
    {
        // await LoadDataFromDb(); // private async Task LoadDataFromDb()
        // await Task.Delay(3000);

        mensagens = (
            await context.Mensagens
                .AsNoTracking()
                .OrderByDescending(m => m.DtHrRegistro)
                .ToListAsync()
        ).AsQueryable();
    }

    private string? TruncateMiddle(string? texto) =>
        string.IsNullOrEmpty(texto) || texto.Length <= 10
            ? texto
            : $"{texto.Substring(0, 8)}...{texto.Substring(texto.Length - 5, 5)}";

}

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

add cursos ao linkedin
	
Pendentes
	MongoDB para Desenvolvedores .NET - Udemy
	Apis Robustas com C#, MediatR, DDD, Entity Framework - Udemy
	Testes unitários em C# com NUnit e Moq - Udemy
	Crie uma Web API com .NET 6 + EF Core + Docker - Udemy
	Design Patterns com C# - Entendendo Padrões de Projetos - Udemy
	C# - Aplicando Princípios SOLID na prática - Udemy

  
NET 6, CLEAN ARCH, SOLID E CLEAN CODE - Udemy

 string workingDirectory = Environment.CurrentDirectory;
string path = Path.Combine(Directory.GetParent(workingDirectory).Parent.Parent.FullName, @"script.sql");
string script = File.ReadAllText(path);



--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

scripts
  MSSQL
src
 01 - Presentation  
    Api
 01 - Worker Service
   Worker
 02 - Infrastructure
   Bootstrap
   Data
 03 - Application
   App.Api - Services
   App.Worker - Services
   Contracts
 04 - Domain
   Domain - Models - Repository
 05 - Core
   Core - Handlers
   Core.ServiceBus - Consumers
 99 - Shared
   Shared - Commands,Extensions,Querys
tests
  TestsAPI
  TestsWorker

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------




private CommandResult ExecuteInternal()
{
	var commandResult = new CommandResult(); // rlt
	try
	{
		// result.CommandResult() = CommandResult.Success; // Cancel // Failure
		commandResult.AddResult(resultValue); // commandResult.ResultValue = resultValue;
	}
	catch (Exception e)
	{
		commandResult.AddError(e); // commandResult.exception = e; //commandResult.output = ReadStream(ms); // commandResult.LastError = e;
	}
	return commandResult;	
}



--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

https://www.youtube.com/watch?v=i_3I6XLAOt0
Extremely FAST Caching Repository With Decorator Pattern in ASP.NET Core

https://www.youtube.com/watch?v=tKEF6xaeoig
Structuring Dependency Injection In ASP.NET Core The Right Way

https://www.youtube.com/watch?v=enpblqLhzzo
EF Core Performance | How to Optimize Database Updates?

https://www.youtube.com/watch?v=VYitXAc_htI
EF Core 7 Performance Improvements With The New ExecuteUpdate & ExecuteDelete

https://www.youtube.com/watch?v=GY7QwSFeVBQ
One Trick To Improve EF Core Performance Using Query Splitting

https://www.youtube.com/watch?v=jSiGyPHqnpY
EF Core Performance Optimization Challenge | 233x FASTER

https://www.youtube.com/watch?v=neH0_7bti_I
Write Faster SQL Queries With Dapper In .NET | Clean Architecture

https://www.youtube.com/watch?v=jgESld7U5Bw
Performance Tips [5 of 5] | Entity Framework Core for Beginners

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------


https://www.youtube.com/watch?v=bN57EDYD6M0


builder.Services.AddDbContext<OrderingContext>(options =>
{
    options.UseSqlServer(builder.Configuration["ConnectionString"],
        sqlServerOptionsAction: sqlOptions =>
        {
            sqlOptions.EnableRetryOnFailure(
            maxRetryCount: 5,
            maxRetryDelay: TimeSpan.FromSeconds(30),
            errorNumbersToAdd: null);
        }
    );
});

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------


var strategy = _catalogContext.Database.CreateExecutionStrategy();
await strategy.ExecuteAsync(async () =>
{
  // Achieving atomicity between original Catalog database operation and the
  // IntegrationEventLog thanks to a local transaction
  using (var transaction = _catalogContext.Database.BeginTransaction())
  {
    _catalogContext.CatalogItems.Update(catalogItem);
    await _catalogContext.SaveChangesAsync();

    // Save to EventLog only if product price changed
    if (raiseProductPriceChangedEvent)
    {
      await _integrationEventLogService.SaveEventAsync(priceChangedEvent);
      transaction.Commit();
    }
  }
});


--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------


"ConnectionStrings": {
        "Sqlite" : "Data Source=vehicles.db",
        "Postgres" : "User ID=postgres;Password=Pass123!;Server=localhost;Port=5432;Database=vehicles;"
 }


var config = builder.Configuration;
builder.Services.AddDbContext<VehiclesContext>(options =>
{
    var provider = config.GetValue("provider", Sqlite.Name);
    if (provider == Sqlite.Name)
    {
        options.UseSqlite(
            config.GetConnectionString(Sqlite.Name)!,
            x => x.MigrationsAssembly(Sqlite.Assembly)
        );
    }
    if (provider == Postgres.Name) {
        options.UseNpgsql(
            config.GetConnectionString(Postgres.Name)!,
            x => x.MigrationsAssembly(Postgres.Assembly)
        );
    }
});


public record Provider(string Name, string Assembly) 
{
    public static Provider Sqlite = new (nameof(Sqlite), typeof(Sqlite.Marker).Assembly.GetName().Name!);
    public static Provider Postgres = new (nameof(Postgres), typeof(Postgres.Marker).Assembly.GetName().Name!);
}

var provider = config.GetValue("provider", Sqlite.Name);


using BoxedSoftware.Models;
using Microsoft.EntityFrameworkCore;
using static BoxedSoftware.Provider;
var builder = WebApplication.CreateBuilder(args);
var config = builder.Configuration;
builder.Services.AddDbContext<VehiclesContext>(options =>
{
    var provider = config.GetValue("provider", Sqlite.Name);
    if (provider == Sqlite.Name)
    {
        options.UseSqlite(
            config.GetConnectionString(Sqlite.Name)!,
            x => x.MigrationsAssembly(Sqlite.Assembly)
        );
    }
    if (provider == Postgres.Name) {
        options.UseNpgsql(
            config.GetConnectionString(Postgres.Name)!,
            x => x.MigrationsAssembly(Postgres.Assembly)
        );
    }
});
var app = builder.Build();
// initialize database
using (var scope = app.Services.CreateScope()) {
    var db = scope.ServiceProvider.GetRequiredService<VehiclesContext>();
    await VehiclesContext.InitializeAsync(db);
}
app.MapGet("/", (VehiclesContext db) => 
    db.Vehicles.OrderBy(x => x.Id).Take(10).ToList()
);
app.Run();

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Threading.Tasks;

namespace MvpConfDemos
{
    public class Database
    {
        private readonly SqlConnection _connection;

        public Database()
        {
            var connectionString = @"Server=VINICIUS_MUSSAK\SQLEXPRESS;Database=TESTES;Trusted_Connection=True;";
            _connection = new SqlConnection(connectionString);
        }

        public void Insert()
        {
            _connection.Open();

            for (int i = 0; i < 100_000; i++)
            {
                new SqlCommand($"INSERT INTO Cliente (Nome, DataNascimento, ClienteEspecial, NomeDaMae, QuantidadeFilhos) VALUES ('Cliente {i}', GETDATE(), {i % 2}, 'Mae {i}', {i.ToString().Substring(0, 1)})", _connection).ExecuteNonQuery();
            }
        }

        public IEnumerable<Cliente> BuscarClientes()
        {
            var query = "SELECT * FROM Cliente";
            var lstCliente = new List<Cliente>();

            _connection.Open();
            var cmd = new SqlCommand(query, _connection);
            using (var reader = cmd.ExecuteReader())
            {
                if (reader.HasRows)
                {
                    var time = new Stopwatch();
                    time.Start();

                    while (reader.Read())
                        lstCliente.Add(new Cliente
                        {
                            Id = (int)reader["Id"],
                            Nome = reader["Nome"].ToString(),
                            DataNascimento = (DateTime)reader["DataNascimento"],
                            ClienteEspecial = (bool)reader["ClienteEspecial"],
                            NomeDaMae = reader["NomeDaMae"].ToString(),
                            QuantidadeFilhos = (byte)reader["QuantidadeFilhos"]
                        });

                    time.Stop();
                    Console.WriteLine("Tempo buscando pelo nome da coluna: {0}", time.Elapsed);
                }
            }

            _connection.Close();

            return lstCliente;
        }

        public IEnumerable<Cliente> BuscarClientes2()
        {
            var query = "SELECT * FROM Cliente";
            var lstCliente = new List<Cliente>();

            _connection.Open();
            var cmd = new SqlCommand(query, _connection);
            using (var reader = cmd.ExecuteReader())
            {
                if (reader.HasRows)
                {
                    var time = new Stopwatch();
                    time.Start();

                    int id = reader.GetOrdinal("Id"),
                        nome = reader.GetOrdinal("Nome"),
                        dataNascimento = reader.GetOrdinal("DataNascimento"),
                        clienteEspecial = reader.GetOrdinal("ClienteEspecial"),
                        nomeDaMae = reader.GetOrdinal("NomeDaMae"),
                        quantidadeFilhos = reader.GetOrdinal("QuantidadeFilhos");

                    while (reader.Read())
                        lstCliente.Add(new Cliente
                        {
                            Id = reader.GetInt32(id),
                            Nome = reader.GetString(nome),
                            DataNascimento = reader.GetDateTime(dataNascimento),
                            ClienteEspecial = reader.GetBoolean(clienteEspecial),
                            NomeDaMae = reader.GetString(nomeDaMae),
                            QuantidadeFilhos = reader.GetByte(quantidadeFilhos)
                        });

                    time.Stop();
                    Console.WriteLine("Tempo utilizando o GetOrdinal: {0}", time.Elapsed);
                }
            }

            _connection.Close();

            return lstCliente;
        }
    }

    public class Cliente
    {
        public int Id { get; set; }
        public string Nome { get; set; }
        public DateTime DataNascimento { get; set; }
        public bool ClienteEspecial { get; set; }
        public string NomeDaMae { get; set; }
        public byte QuantidadeFilhos { get; set; }
    }
}



CREATE TABLE Moradores
(
	Id INT IDENTITY(1,1) PRIMARY KEY,
	Nome VARCHAR(100) DEFAULT NEWID(),
	Telefone BIGINT DEFAULT(FLOOR(RAND()*(100000000-50000000+1)+50000000)),
	UF CHAR(2) DEFAULT('SP')
)
GO

CREATE INDEX IDX_Nome ON Moradores(UF)
GO

INSERT INTO Moradores DEFAULT VALUES
GO 10000

SET STATISTICS IO ON;  
SELECT	Id,
		Nome,
		Telefone
	FROM Moradores --WITH(INDEX(IDX_Nome))
	WHERE UF = 'SP'

CREATE INDEX IDX_Nome ON Moradores(UF) INCLUDE(Id, Nome, Telefone) WITH(DROP_EXISTING = ON)
GO


--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

https://github.com/programevc/Projeto_Order/blob/main/Order.Infra/Repositories/OrderRepository.cs


    <PackageReference Include="System.Data.SqlClient" Version="4.8.2" />


using Order.Domain.Interfaces.Repositories.DataConnector;
using System.Data;
using System.Data.SqlClient;

namespace Order.Infra.DataConnector
{
    public class SqlConnector : IDbConnector
    {
        public SqlConnector(string connectionString)
        {
            dbConnection = SqlClientFactory.Instance.CreateConnection();
            dbConnection.ConnectionString = connectionString;
        }

        public IDbConnection dbConnection { get; }

        public IDbTransaction dbTransaction { get; set; }

        public IDbTransaction BeginTransaction(IsolationLevel isolation)
        {
            if (dbTransaction != null)
            {
                return dbTransaction;
            }

            if (dbConnection.State == ConnectionState.Closed)
            {
                dbConnection.Open();
            }

            return (dbTransaction = dbConnection.BeginTransaction(isolation));
        }

        public void Dispose()
        {
            dbConnection?.Dispose();
            dbTransaction?.Dispose();
        }
    }
}

namespace Order.Domain.Models
{
    public class UserModel : EntityBase
    {
        public string Name { get; set; }
        public string Login { get; set; }
        public string PasswordHash { get; set; }
    }
}
namespace Order.Domain.Models
{
    public abstract class EntityBase
    {
        public string Id { get; set; }
        public DateTime CreatedAt { get; set; }
    }
}

namespace Order.Domain.Interfaces.Services
{
    public interface IUserService
    {
        Task<Response<bool>> AutheticationAsync(string password, UserModel user);
        Task<Response> CreateAsync(UserModel user);
        Task<Response> UpdateAsync(UserModel user);
        Task<Response> DeleteAsync(string userId);
        Task<Response<UserModel>> GetByIdAsync(string userId);
        Task<Response<UserModel>> GetByLoginAsync(string login);
        Task<Response<List<UserModel>>> ListByFilterAsync(string userId = null, string name = null);
    }
}
namespace Order.Domain.Interfaces.Repositories
{
    public interface IUserRepository
    {
        Task CreateAsync(UserModel user);
        Task UpdateAsync(UserModel user);
        Task DeleteAsync(string userId);
        Task<UserModel> GetByIdAsync(string userId);
        Task<UserModel> GetByLoginAsync(string login);
        Task<List<UserModel>> ListByFilterAsync(string userId = null, string name = null);
        Task<bool> ExistsByIdAsync(string userId);
        Task<bool> ExistsByLoginAsync(string login);
    }
}
namespace Order.Domain.Interfaces.Repositories
{
    public interface IUnitOfWork
    {
        IDbConnector dbConnector { get;}
        IClientRepository ClientRepository { get; }
        IOrderRepository OrderRepository { get; }
        IProductRepository ProductRepository { get; }
        IUserRepository UserRepository { get; }
        void BeginTransaction();
        void CommitTransaction();
        void RollbackTransaction();
    }
}
namespace Order.Domain.Interfaces.Repositories.DataConnector
{
    public interface IDbConnector : IDisposable
    {
        IDbConnection dbConnection { get;  }
        IDbTransaction dbTransaction { get; set; }
        IDbTransaction BeginTransaction(IsolationLevel isolation);
    }
}
namespace Order.Application.Interfacds
{
    public interface IUserApplication
    {
        Task<Response<AuthResponse>> AuthAsync(AuthRequest auth);
        Task<Response> CreateAsync(CreateUserRequest User);
        Task<Response<List<UserResponse>>> ListByFilterAsync(string userId = null, string name = null);
    }
}

namespace Order.Application.DataContract.Response.Client
{
    public sealed class UserResponse
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Login { get; set; }
    }
}
namespace Order.Application.DataContract.Request.User
{
    public class CreateUserRequest
    {
        public string Name { get; set; }
        public string Login { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
    }
}
namespace Order.Application.DataContract.Request.User
{
    public class AuthRequest
    {
        public string Login { get; set; }
        public string Password { get; set; }
    }
}

namespace Order.Infra.Repositories
{
    public class UnitOfWork : IUnitOfWork
    {
        private IClientRepository _clientRepository;
        private IProductRepository _productRepository;
        private IOrderRepository _orderRepository;
        private IUserRepository _userRepository;
        public UnitOfWork(IDbConnector dbConnector)
        {
            this.dbConnector = dbConnector;
        }
        public IClientRepository ClientRepository => _clientRepository ?? (_clientRepository = new ClientRepository(dbConnector));
        public IOrderRepository OrderRepository => _orderRepository ?? (_orderRepository = new OrderRepository(dbConnector));
        public IProductRepository ProductRepository => _productRepository ?? (_productRepository = new ProductRepository(dbConnector));
        public IUserRepository UserRepository => _userRepository ?? (_userRepository = new UserRepository(dbConnector));
        public IDbConnector dbConnector { get; }
        public void BeginTransaction()
        {
            dbConnector.BeginTransaction(System.Data.IsolationLevel.ReadUncommitted);
        }
        public void CommitTransaction()
        {
            if (dbConnector.dbConnection.State == System.Data.ConnectionState.Open)
            {
                dbConnector.dbTransaction.Commit();
            }
        }
        public void RollbackTransaction()
        {
            if (dbConnector.dbConnection.State == System.Data.ConnectionState.Open)
            {
                dbConnector.dbTransaction.Rollback();
            }
        }
    }
}

namespace Order.Infra.Repositories
{
    public class UserRepository : IUserRepository
    {
        private readonly IDbConnector _dbConnector;
        public UserRepository(IDbConnector dbConnector)
        {
            _dbConnector = dbConnector;
        }
        const string baseSql = @"SELECT [Id] ,[Name] ,[Login] ,[PasswordHash] ,[CreatedAt] FROM [dbo].[User] WHERE 1 = 1 ";
        public async Task CreateAsync(UserModel user)
        {
            string sql = @"INSERT INTO [dbo].[User]([Id] ,[Name] ,[Login] ,[PasswordHash] ,[CreatedAt]) VALUES (@Id ,@Name ,@Login ,@PasswordHash ,@CreatedAt)";
            await _dbConnector.dbConnection.ExecuteAsync(sql, new { Id = user.Id, Name = user.Name, Login = user.Login, PasswordHash = user.PasswordHash, CreatedAt = user.CreatedAt }, _dbConnector.dbTransaction);
        }
        public async Task UpdateAsync(UserModel user)
        {
            string sql = @"UPDATE [dbo].[User] SET [Name] = @Name ,[Login] = @Login ,[PasswordHash] = @PasswordHash WHERE id = @Id ";
            await _dbConnector.dbConnection.ExecuteAsync(sql, new { Id = user.Id, Name = user.Name, Login = user.Login, PasswordHash = user.PasswordHash }, _dbConnector.dbTransaction);
        }
        public async Task DeleteAsync(string userId)
        {
            string sql = $"DELETE FROM [dbo].[User] WHERE id = @id";
            await _dbConnector.dbConnection.ExecuteAsync(sql, new { Id = userId }, _dbConnector.dbTransaction);
        }
        public async Task<bool> ExistsByIdAsync(string userId)
        {
            string sql = $"SELECT 1 FROM User WHERE Id = @Id ";
            var users = await _dbConnector.dbConnection.QueryAsync<bool>(sql, new { Id = userId }, _dbConnector.dbTransaction);
            return users.FirstOrDefault();
        }
        public async Task<bool> ExistsByLoginAsync(string login)
        {
            string sql = $"SELECT 1 FROM [User] WHERE Login = @Login ";
            var users = await _dbConnector.dbConnection.QueryAsync<bool>(sql, new { Login = login }, _dbConnector.dbTransaction);
            return users.FirstOrDefault();
        }
        public async Task<UserModel> GetByIdAsync(string userId)
        {
            string sql = $"{baseSql} AND Id = @Id";
            var users = await _dbConnector.dbConnection.QueryAsync<UserModel>(sql, new { Id = userId }, _dbConnector.dbTransaction);
            return users.FirstOrDefault();
        }
        public async Task<List<UserModel>> ListByFilterAsync(string login = null, string name = null)
        {
            string sql = $"{baseSql} ";
            if (!string.IsNullOrWhiteSpace(login)) sql += "AND login = @Login";
            if (!string.IsNullOrWhiteSpace(name)) sql += "AND Name like @Name";
            var users = await _dbConnector.dbConnection.QueryAsync<UserModel>(sql, new { Login = login, Name = "%" + name + "%" }, _dbConnector.dbTransaction);
            return users.ToList();
        }
        public async Task<UserModel> GetByLoginAsync(string login)
        {
            string sql = $"{baseSql} AND Login = @Login";
            var users = await _dbConnector.dbConnection.QueryAsync<UserModel>(sql, new { Login = login }, _dbConnector.dbTransaction);
            return users.FirstOrDefault();
        }
    }
}

namespace Order.Domain.Services
{
    public class UserService : IUserService
    {
        private readonly IUserRepository _UserRepository;
        private readonly ITimeProvider _timeProvider;
        private readonly IGenerators _generators;
        private readonly ISecurityService _securityService;
        public UserService(IUserRepository UserRepository, ITimeProvider timeProvider, IGenerators generators,  ISecurityService securityService)
        {
            _UserRepository = UserRepository;
            _timeProvider = timeProvider;
            _generators = generators;
            _securityService = securityService;
        }
        public async Task<Response<bool>> AutheticationAsync(string password, UserModel user)
        {
            return await _securityService.VerifyPassword(password, user);
        }
        public async Task<Response> CreateAsync(UserModel user)
        {
            var response = new Response();
            var validation = new UserValidation();
            var errors = validation.Validate(user).GetErrors();
            if (errors.Report.Count > 0)
                return errors;
            user.Id = _generators.Generate();
            user.CreatedAt = _timeProvider.utcDateTime();
            await _UserRepository.CreateAsync(user);
            return response;
        }
        public async Task<Response> DeleteAsync(string userId)
        {
            var response = new Response();
            var exists = await _UserRepository.ExistsByIdAsync(userId);
            if (!exists)
            {
                response.Report.Add(Report.Create($"User {userId} not exists!"));
                return response;
            }
            await _UserRepository.DeleteAsync(userId);
            return response;
        }
        public async Task<Response<UserModel>> GetByIdAsync(string userId)
        {
            var response = new Response<UserModel>();
            var exists = await _UserRepository.ExistsByIdAsync(userId);
            if (!exists)
            {
                response.Report.Add(Report.Create($"User {userId} not exists!"));
                return response;
            }
            var data = await _UserRepository.GetByIdAsync(userId);
            response.Data = data;
            return response;
        }
        public async Task<Response<UserModel>> GetByLoginAsync(string login)
        {
            var response = new Response<UserModel>();
            var exists = await _UserRepository.ExistsByLoginAsync(login);
            if (!exists)
            {
                response.Report.Add(Report.Create($"User {login} not exists!"));
                return response;
            }
            var data = await _UserRepository.GetByLoginAsync(login);
            response.Data = data;
            return response;
        }
        public async Task<Response<List<UserModel>>> ListByFilterAsync(string userId = null, string name = null)
        {
            var response = new Response<List<UserModel>>();
            if (!string.IsNullOrWhiteSpace(userId))
            {
                var exists = await _UserRepository.ExistsByIdAsync(userId);
                if (!exists)
                {
                    response.Report.Add(Report.Create($"User {userId} not exists!"));
                    return response;
                }
            }
            var data = await _UserRepository.ListByFilterAsync(userId, name);
            response.Data = data;
            return response;
        }
        public async Task<Response> UpdateAsync(UserModel user)
        {
            var response = new Response();
            var validation = new UserValidation();
            var errors = validation.Validate(user).GetErrors();
            if (errors.Report.Count > 0)
                return errors;
            var exists = await _UserRepository.ExistsByIdAsync(user.Id);
            if (!exists)
            {
                response.Report.Add(Report.Create($"User {user.Id} not exists!"));
                return response;
            }
            await _UserRepository.UpdateAsync(user);
            return response;
        }
    }
}

namespace Order.Application.Applications
{
    public class UserApplication : IUserApplication
    {
        private readonly IUserService _UserService;
        private readonly IMapper _mapper;
        private readonly ISecurityService _securityService;
        private readonly ITokenManager _tokenManager;
        public UserApplication(IUserService UserService, IMapper mapper, ISecurityService securityService, ITokenManager tokenManager)
        {
            _UserService = UserService;
            _mapper = mapper;
            _securityService = securityService;
            _tokenManager = tokenManager;
        }
        public async Task<Response<AuthResponse>> AuthAsync(AuthRequest auth)
        {
            var user = await _UserService.GetByLoginAsync(auth.Login);

            if (user.Report.Any())
                return Response.Unprocessable<AuthResponse>(user.Report);
            var isAuthenticated = await _UserService.AutheticationAsync(auth.Password, user.Data);
            if (!isAuthenticated.Data)
                return Response.Unprocessable<AuthResponse>(new List<Report>() { Report.Create("Invalid password or login") });
            var token = await _tokenManager.GenerateTokenAsync(user.Data);
            return new Response<AuthResponse>(token);
        }
        public async Task<Response> CreateAsync(CreateUserRequest User)
        {
            try
            {
                var isEquals = await _securityService.ComparePassword(User.Password, User.ConfirmPassword);
                if (!isEquals.Data)
                    return Response.Unprocessable(Report.Create("Passwords do not match"));
                var passwordEncripted = await _securityService.EncryptPassword(User.Password);
                User.Password = passwordEncripted.Data;
                var UserModel = _mapper.Map<UserModel>(User);
                return await _UserService.CreateAsync(UserModel);
            }
            catch (Exception ex)
            {
                var response = Report.Create(ex.Message);
                return Response.Unprocessable(response);
            }
        }
        public async Task<Response<List<UserResponse>>> ListByFilterAsync(string userId = null, string name = null)
        {
            try
            {
                Response<List<UserModel>> user = await _UserService.ListByFilterAsync(userId, name);
                if (user.Report.Any())
                    return Response.Unprocessable<List<UserResponse>>(user.Report);
                var response = _mapper.Map<List<UserResponse>>(user.Data);
                return Response.OK(response);
            }
            catch (Exception ex)
            {
                var response = Report.Create(ex.Message);
                return Response.Unprocessable<List<UserResponse>>(new List<Report>() { response });
            }
        }
    }
}

namespace Order.Api.Controllers
{
    public class UserController : ControllerBase
    {
        private readonly IUserApplication _UserApplication;

        public UserController(IUserApplication UserApplication)
        {
            _UserApplication = UserApplication;
        }
        public async Task<ActionResult> Get([FromQuery] string userId, [FromQuery] string name)
        {
            var response = await _UserApplication.ListByFilterAsync(userId, name);
            if (response.Report.Any())
                return UnprocessableEntity(response.Report);
            return Ok(response);
        }
        public string Get(int id)
        {
            return "value";
        }
        public async Task<ActionResult> Post([FromBody] CreateUserRequest request)
        {
            var response = await _UserApplication.CreateAsync(request);
            if (response.Report.Any())
                return UnprocessableEntity(response.Report);
            return Ok(response);
        }
        public async Task<ActionResult> Auth([FromBody] AuthRequest request)
        {
            var response = await _UserApplication.AuthAsync(request);
            if (response.Report.Any())
                return UnprocessableEntity(response.Report);
            return Ok(response);
        }
    }
}

Dockerfile

FROM mcr.microsoft.com/dotnet/core/aspnet:3.1-buster-slim AS base
WORKDIR /app
EXPOSE 80
EXPOSE 443

FROM mcr.microsoft.com/dotnet/core/sdk:3.1-buster AS build
WORKDIR /src
COPY ["Order/Order.csproj", "Order/"]
RUN dotnet restore "Order/Order.csproj"
COPY . .
WORKDIR "/src/Order"
RUN dotnet build "Order.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "Order.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "Order.dll"]

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
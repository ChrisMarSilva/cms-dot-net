version: '3.4' 

# "C:\Program Files\Docker\Docker\DockerCli.exe" -SwitchDaemon
# docker pull redis:latest
# docker pull rediscommander/redis-commander:latest
# docker pull rabbitmq:3-management
# docker pull jaegertracing/all-in-one:latest
# docker pull prom/prometheus:latest
# docker pull grafana/grafana:latest
# docker pull docker.elastic.co/kibana/kibana:7.10.2
# docker pull docker.elastic.co/elasticsearch/elasticsearch:7.10.2
# docker pull ibmcom/mq:latest
# cd "D:\CMS DotNet"
# docker-compose down
# docker-compose up -d --build

# sc.exe create "JD.SFN.Send.Worker" binpath="D:\ST_Git\SFN\SFN\src\01 - Workers\01 - Send\JD.SFN.Send.Worker\bin\Debug\net7.0\JD.SFN.Send.Worker.exe"
# sc.exe create "JD.SFN.Receive.File.Worker" binpath="D:\ST_Git\SFN\SFN\src\01 - Workers\02 - Receive\JD.SFN.Receive.File.Worker\bin\Debug\net7.0\JD.SFN.Receive.File.Worker.exe"
# sc.exe create "JD.SFN.Receive.Worker" binpath="D:\ST_Git\SFN\SFN\src\01 - Workers\02 - Receive\JD.SFN.Receive.Worker\bin\Debug\net7.0\JD.SFN.Receive.Worker.exe"
# sc.exe create "JD.SFN.Router.Worker" binpath="D:\ST_Git\SFN\SFN\src\01 - Workers\03 - Router\JD.SFN.Router.Worker\bin\Debug\net7.0\JD.SFN.Router.Worker.exe"
# sc.exe create "JD.SFN.Persister.Worker" binpath="D:\ST_Git\SFN\SFN\src\01 - Workers\04 - Persister\JD.SFN.Persister.Worker\bin\Debug\net7.0\JD.SFN.Persister.Worker.exe"
# sc.exe create "JD.NPC.Sfn.Simulador" binpath="D:\ST_Git\JDNPC\NPC\POC\JD.NPC.Sfn.Simulador\bin\Debug\net7.0\JD.NPC.Sfn.Simulador.exe"
# sc.exe start "JD.SFN.Send.Worker"
# sc.exe stop "JD.SFN.Send.Worker"
# sc.exe delete "JD.SFN.Send.Worker"

#volumes:
  #qmdata:
  #rabbitmqdata:
  #esdata:
  #data:
  #postgres-data:
  #minio_storage: 

#networks: 
#  postgres-network:
#    driver: bridge    
    
services:  

  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbit
    environment: 
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
    ports: 
      - 15672:15672
      - 5672:5672      
      - 25676:25676 
    volumes:
      - ./.docker/rabbitmq/etc/:/etc/rabbitmq/
      - ./.docker/rabbitmq/data/:/var/lib/rabbitmq/
      - ./.docker/rabbitmq/logs/:/var/log/rabbitmq/
 
  redis:
    image: redis:latest
    command: redis-server --requirepass Redis2019! --appendonly yes
    ports:
      - "6379:6379" 
    restart: always 

#  redis-commander:
#     image: rediscommander/redis-commander:latest
#     restart: always
#     environment:
#       - REDIS_HOSTS=local:localhost:6379
#       - REDIS_PASSWORD=Redis2019!
#       - HTTP_USER=admin
#       - HTTP_PASSWORD=admin
#     ports:
#       - 8082:8081
#     depends_on:
#       - redis      

  #mqseries:
  #  image: ibmcom/mq:latest
  #  ports:
  #    - "9443:9443"    
  #    - "1414:1414" 
  #    - 9157:9157 
  #  environment:
  #    - LICENSE=accept
  #    - MQ_QMGR_NAME=QM1
  #    - MQ_ADMIN_PASSWORD="Admin123"
  #    - MQ_APP_PASSWORD="Admin123"
  #    - MQ_ENABLE_METRICS=true
  #  volumes:
  #    - qmdata:/mnt/mqm
  #  stdin_open: true
  #  tty: true
  #  restart: always

#  prometheus:
#    image: prom/prometheus:latest
#    restart: always
#    ports:
#      - 9090:9090
    
#  grafana:
#   image: grafana/grafana:latest
#   ports:
#    - 3000:3000
#   links:
#    - prometheus       

#  elasticsearch:
#   image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
#   volumes:
#     - ./esdata:/usr/share/elasticsearch/data   
#   container_name: elasticsearch
#   ports:
#     - "9200:9200"
#   environment:
#     - bootstrap.memory_lock=true
#     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#     - discovery.type=single-node

#  jaeger:
#    image: jaegertracing/all-in-one:latest
#    ports: 
#      - 5775:5775/udp
#      - 6831:6831/udp
#      - 6832:6832/udp
#      - 5778:5778
#      - 16686:16686
#      - 14268:14268
#      - 14250:14250
#      - 4317:4317
#      - 4318:4318
#    environment:
#      - SPAN_STORAGE_TYPE=elasticsearch
#      - ES_SERVER_URLS=http://elasticsearch:9200
#      - ES_TAGS_AS_FIELDS_ALL=true
#      - COLLECTOR_OTLP_ENABLED=true
#    links:
#      - elasticsearch

#  kibana:
#   image: docker.elastic.co/kibana/kibana:7.10.2
#   container_name: kibana
#   ports:
#    - "5601:5601"
#   depends_on:
#    - elasticsearch  
    
#  mssql:
#     image: "mcr.microsoft.com/mssql/server"
#     ports:
#       - "1433:1433"
#     environment:
#        SA_PASSWORD: "Your_password123"
#        ACCEPT_EULA: "Y" 
      
#  keydb:
#    image: eqalpha/keydb:x86_64_v5.3.3
#    container_name: keydb
#    # command: keydb-server /etc/keydb/redis.conf --server-threads 2 --active-replica yes --replicaof 192.168.1.1 6379
#    # command: keydb-server /etc/keydb/redis.conf --server-threads 2 --active-replica yes --replicaof 192.168.1.2 6379
#    command: keydb-server /etc/keydb/redis.conf --server-threads 2
#    volumes:
#      - ./redis.conf:/etc/keydb/redis.conf
#      - data:/data
#    ports:
#      - 6379:6379
#    restart: unless-stopped    

#  minio:
#    image: minio/minio
#    command: server --console-address ":9001" /data
#    ports:
#      - "9000:9000"
#      - "9001:9001"
#    environment:
#      MINIO_ROOT_USER: "minioadmin"
#      MINIO_ROOT_PASSWORD: "minioadmin"
#    volumes:
#      - minio_storage:/data 
